@page "/login"
@using System.ComponentModel.DataAnnotations
@using EduBuddyApp.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject UserState UserState
@inject IEmployeeService EmployeeService
@inject ISchoolService SchoolService

<h3>Login</h3>

<EditForm Model="credentials" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label class="form-label" for="schoolId">School ID</label><br />
        <InputNumber id="schoolId"
                     class="form-control"
                     @bind-Value="credentials.SchoolId" />
    </div>

    <div class="mb-2">
        <label class="form-label" for="username">Username</label><br />
        <InputText id="username"
                   class="form-control"
                   @bind-Value="credentials.UserName" />
    </div>

    

    <div class="mb-2">
        <label class="form-label" for="password">Password</label><br />
        <InputText id="password"
                   class="form-control"
                   type="password"
                   @bind-Value="credentials.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Log in</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <p class="text-danger">@error</p>
}
else if (loginResult.IsSuccess)
{
    <p class="text-success">
        Logged in! Your employee ID is <strong>@loginResult.Id</strong>
        @if (loginResult.SchoolId is not null)
        {
            <span> (School <strong>@loginResult.SchoolId</strong>)</span>
        }
        JWT (first 20 chars): <code>@loginResult.Token?[..20] …</code>
    </p>
    <button class="btn btn-secondary" @onclick="NavigateHome">
        Continue to Home
    </button>
}

@code {
    private Credentials credentials = new();
    private LoginResult loginResult = new(false, 0, null, null);
    private string? error;

    public class Credentials
    {
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "School ID is required")]
        public int SchoolId { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        // clear prior state
        error = null;
        loginResult = new(false, 0, null, null);

        // modify username to include school id
        var userWithSchool = credentials.UserName;
        var atIndex = userWithSchool.IndexOf('@');
        if (atIndex > -1)
        {
            userWithSchool = userWithSchool.Insert(atIndex, $"+{credentials.SchoolId}");
        }

        // call the API
        loginResult = await AuthService.LoginAsync(
            userWithSchool,
            credentials.Password);

        if (!loginResult.IsSuccess)
        {
            error = "Invalid credentials";
        }
        else
        {
            UserState.EmployeeId = loginResult.Id;
            UserState.SchoolId = loginResult.SchoolId;
            //UserState.IsCollege = loginResult.SchoolId is null;
            UserState.Jwt = loginResult.Token;

            if (UserState.EmployeeId is not null)
            {
                try
                {
                    UserState.EmployeeDetails = await EmployeeService.GetEmployeeBasicAsync(UserState.EmployeeId.Value);

                }
                catch (Exception ex)
                {
                    error = $"Failed to load employee details: {ex.Message}";
                }
            }
            // Update IsCollege using SchoolService
            if (UserState.SchoolId is not null)
            {
                var schoolBasic = await SchoolService.GetBasicSchoolAsync(UserState.SchoolId.Value);
                UserState.IsCollege = schoolBasic?.IsCollege ?? false;
            }
            
        }
    }

    private void NavigateHome()
    {
        Navigation.NavigateTo("/");
    }
}
