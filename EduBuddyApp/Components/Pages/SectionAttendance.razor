@page "/sectionattendance"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using EduBuddyApp.Models
@using EduBuddyApp.Services
@inject IStudentAttendanceService StudentAttendanceService
@inject ISectionService SectionService
@inject ISchoolService SchoolService
@inject UserState UserState

<h3>Section Attendance</h3>

@if (AttendanceDay == null || SectionInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenAlert Title="@AttendanceHeading" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Darker" AllowClose="false">
        Total Students: @TotalStudents <br />
        Present: @PresentStudents | Absent: @AbsentStudents
    </RadzenAlert>
    <hr />
    <EditForm Model="@AttendanceDay" OnValidSubmit="AddAttendance">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        <!-- Buttons disabled while IsSaving is true -->
        <button type="button" class="btn btn-success" @onclick="MarkAllAsPresent" disabled="@IsSaving">Mark All as Present</button>
        <button type="button" class="btn btn-warning" @onclick="MarkAllAsAbsent" disabled="@IsSaving">Mark All as Absent</button>
        <button type="button" class="btn btn-secondary" @onclick="RestoreOriginalData" disabled="@IsSaving">Reset Attendance</button>
        <table class="table">
            <thead>
                <tr>
                    <th>Student</th>
                    <th>Present</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var studentAttendance in AttendanceDay.Attendances!)
                {
                    <tr>
                        @if (!ShowRollNoinAttendance)
                        {
                            <td title="FatherName: @studentAttendance.FatherName">@studentAttendance.StudentName - @studentAttendance.StudentId</td>
                        }
                        else
                        {
                            <td title="FatherName: @studentAttendance.FatherName">@studentAttendance.University_RollNo - @studentAttendance.StudentName</td>
                        }
                        <td>
                            <InputCheckbox @bind-Value="studentAttendance.IsPresent" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-info mt-3">@Message</div>
        }
        <p>
            <button type="submit" class="btn btn-primary" disabled="@IsSaving">Update Attendance</button>
            <a class="btn btn-dark" href="@($"/sections/SectionClassList")" disabled="@IsSaving">Cancel</a>
        </p>
    </EditForm>
}

@code {
    private AttendanceDayViewModel? AttendanceDay;
    private SectionViewModel? SectionInfo;
    private string? Message;
    private bool ShowRollNoinAttendance;
    private bool IsSaving; // Tracks saving status

    private string AttendanceHeading => SectionInfo == null || AttendanceDay == null
        ? "Attendance"
        : $"{SectionInfo.ClassName}-{SectionInfo.SectionName} ({AttendanceDay.AttendanceDate:dd MMM yyyy})";

    private int TotalStudents => AttendanceDay?.Attendances?.Count ?? 0;
    private int PresentStudents => AttendanceDay?.Attendances?.Count(a => a.IsPresent) ?? 0;
    private int AbsentStudents => TotalStudents - PresentStudents;

    // Store original attendance state as a serialized copy
    private List<AttendanceViewModel> originalAttendances = new();
    private List<bool> originalPresentStates = new();

    protected override async Task OnInitializedAsync()
    {
        int schoolId = UserState.SchoolId ?? 0;
        int sectionId = UserState.EmployeeDetails?.ClassTeacherSchoolClassId ?? 0;

        var day = await StudentAttendanceService.GetAttendanceDayAsync(schoolId);
        var section = await SectionService.GetSectionAsync(sectionId);
        var school = await SchoolService.GetSchoolAsync(schoolId);

        AttendanceDay = day;
        SectionInfo = section;
        ShowRollNoinAttendance = school?.ShowRollNoinAttendance ?? false;

        if (AttendanceDay != null)
        {
            AttendanceDay.Attendances = await StudentAttendanceService.GetAttendanceForSectionAsync(sectionId, AttendanceDay.AttendanceDayId);
            originalAttendances = AttendanceDay.Attendances.ToList(); // Store reference
            originalPresentStates = AttendanceDay.Attendances.Select(a => a.IsPresent).ToList(); // Store just the boolean values
        }
    }

    private void MarkAllAsPresent()
    {
        if (AttendanceDay?.Attendances == null) return;
        foreach (var a in AttendanceDay.Attendances)
        {
            a.IsPresent = true;
        }
    }

    private void MarkAllAsAbsent()
    {
        if (AttendanceDay?.Attendances == null) return;
        foreach (var a in AttendanceDay.Attendances)
        {
            a.IsPresent = false;
        }
    }

    private void RestoreOriginalData()
    {
        if (AttendanceDay?.Attendances == null || originalPresentStates.Count == 0) return;

        // Restore the original present/absent state for each attendance record
        for (int i = 0; i < AttendanceDay.Attendances.Count && i < originalPresentStates.Count; i++)
        {
            AttendanceDay.Attendances[i].IsPresent = originalPresentStates[i];
        }
        
        StateHasChanged();
    }

    private async Task AddAttendance()
    {
        if (AttendanceDay?.Attendances == null || SectionInfo == null)
        {
            Message = "Cannot update attendance: Missing data";
            return;
        }

        IsSaving = true;
        try
        {
            int sectionId = SectionInfo.SectionId;
            int attendanceDayId = AttendanceDay.AttendanceDayId;
            
            // Call the service to update attendance
            bool success = await StudentAttendanceService.UpdateAttendancesAsync(
                sectionId, 
                attendanceDayId, 
                AttendanceDay.Attendances.ToList()
            );
            
            if (success)
            {
                Message = "Attendance updated successfully";
                // Update original attendance records after successful save
                originalPresentStates = AttendanceDay.Attendances.Select(a => a.IsPresent).ToList();
            }
            else
            {
                Message = "Failed to update attendance. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error updating attendance: {ex.Message}";
            Console.WriteLine($"Error in AddAttendance: {ex}");
        }
        finally
        {
            IsSaving = false;
        }
    }
}
