@using EduBuddyApp.Models
@using EduBuddyApp.Services
@inject IExamMarksService ExamMarksService

@if (studentMarks == null)
{
    <p><em>Loading...</em></p>
}
else if (studentMarks.Count == 0)
{
    <p><em>No marks available.</em></p>
}
else
{
    <SfGrid DataSource="@studentMarks" TValue="StudentSubjectExamMarksDto"
            AllowFiltering="true" AllowSorting="true" AllowPaging="true" AllowResizing="true"
            EnableAdaptiveUI="true" RowRenderingMode="RowDirection.Vertical"
            Toolbar="@(new List<string>() { "Search", "ColumnChooser" })"
            AllowTextWrap="true" Width="100%" class="table table-striped">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" />
        <GridColumns>
            <GridColumn Field="StudentId" HeaderText="ID" Width="80" />
            <GridColumn Field="StudentName" HeaderText="Student Name" Width="150" />
            @foreach (var exam in exams)
            {
                <GridColumn HeaderText="@exam.ExamName" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
                    <Template>
                        @{ var stu = context as StudentSubjectExamMarksDto; }
                        @DisplayMark(stu, exam.ExamId)
                    </Template>
                </GridColumn>
            }
            <GridColumn Field="StudentExamPerformance" HeaderText="Performance" Width="150" />
            <GridColumn Field="StudentPerformanceFeedback" HeaderText="Feedback" Width="200" />
            <GridColumn Field="TeacherRemarks" HeaderText="Remarks" Width="200" />
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter] public int SectionId { get; set; }
    [Parameter] public int SchoolId { get; set; }
    [Parameter] public int SubjectId { get; set; }

    private List<StudentSubjectExamMarksDto>? studentMarks;
    private List<ExamsViewModel> exams = new();

    protected override async Task OnParametersSetAsync()
    {
        studentMarks = await ExamMarksService.GetStudentSingleSubjectExamMarksAsync(SectionId, SchoolId, SubjectId);
        var examIds = studentMarks
            .SelectMany(s => s.MarksByExam.Select(m => m.ExamId))
            .Distinct()
            .ToList();
        var allExams = await ExamMarksService.GetExamsInOpenSessionAsync(SchoolId);
        exams = allExams.Where(e => examIds.Contains(e.ExamId)).ToList();
    }

    private string DisplayMark(StudentSubjectExamMarksDto? student, int examId)
    {
        if (student == null)
        {
            return string.Empty;
        }
        var mark = student.MarksByExam.FirstOrDefault(m => m.ExamId == examId);
        if (mark == null)
        {
            return string.Empty;
        }
        if (mark.NumericMark.HasValue)
        {
            return mark.NumericMark.Value.ToString();
        }
        return mark.LetterGrade ?? string.Empty;
    }
}

