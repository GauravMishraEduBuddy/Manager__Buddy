@using EduBuddyApp.Models
@using EduBuddyApp.Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@inject ISyllabusService SyllabusService
@inject NavigationManager NavigationManager
@using EduBuddyApp.Services
@inject UserState UserState

@if (syllabusItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfGrid DataSource="@syllabusItems" 
            AllowFiltering="true" AllowSorting="true" ShowColumnChooser="true"
            AllowPaging="true" AllowResizing="true" Width="100%"  
            EnableAdaptiveUI="true" RowRenderingMode="RowDirection.Vertical"
            Toolbar="@(new List<string>() { "Search", "ColumnChooser" })"
            AllowTextWrap="true" class="table table-striped">

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" />
        <GridTemplates>
    <DetailTemplate>
        @{
            var item = context as SyllabusItem;
            var topicInfo = item?.ChapterTitle + (item?.Topics ?? "");
        }
        <SyllabusItemCard Item="@item" />
        @if (IsFeatureEnabled("AI"))
        {
            <TeacherBuddy ClassInfo="@SchoolClassName"
                SubjectInfo="@item?.SubjectName"
                TopicInfo="@topicInfo" IsPageMode="false"
            />
        }
    </DetailTemplate>
</GridTemplates>
        <GridColumns>
            <GridColumn Field="ChapterNumber" HeaderText="Chptr No." Width="80px" />
            <GridColumn Field="ChapterTitle" HeaderText="Chapter Title" Width="220px" />
            <GridColumn Field="ExamNames" HeaderText="Exams" Width="220px" />
            <GridColumn Field="ChapterExcercises" HeaderText="Exercises" Width="80px" />
            <GridColumn Field="ChapterAllottedLectures" HeaderText="Allotted" Width="80px" />
            <GridColumn Field="PeriodsTaken" HeaderText="Periods Taken" Width="80px" />
            <GridColumn Field="Topics" HeaderText="Topics" Width="220px" Visible="false" />
            <GridColumn Field="ChapterActivity" HeaderText="ChapterActivity" Width="220px" Visible="false" />
        </GridColumns>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field="ChapterNumber" Type="AggregateType.Count">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total Chapters: @(data?.Count ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field="ChapterAllottedLectures" Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total: @(data?.Sum ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field="PeriodsTaken" Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total: @(data?.Sum ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>
    </SfGrid>
}

@code {
    [Parameter]
    public int SubjectId { get; set; }
    public string? SchoolClassName => GetSchoolClassName();

    private string? GetSchoolClassName()
    {
        var teacherSubjects = UserState.EmployeeDetails?.TeacherSubjects;
        if (teacherSubjects != null)
        {
            var subject = teacherSubjects.FirstOrDefault(s => s.SubjectID == SubjectId);
            return subject?.SchoolClassName;
        }
        return null;
    }

    private List<SyllabusItem>? syllabusItems;

    protected override async Task OnParametersSetAsync()
    {
        syllabusItems = await SyllabusService.GetSubjectSyllabusAsync(SubjectId);
    }

    private bool IsFeatureEnabled(string facilityName)
    {
        return UserState.FacilityStatuses
            .FirstOrDefault(f => f.FacilityName == facilityName)?.IsEnabled ?? false;
    }
}

