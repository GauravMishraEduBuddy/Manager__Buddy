
@using EduBuddyApp.Services
@using Syncfusion.Blazor.Grids
@inject ISchoolCalendarEventService SchoolCalendarEventService
@inject UserState UserState
@using EduBuddyApp.Models

@if (holidays == null)
{
    <p><em>Loading...</em></p>
}
else if (holidays.Count == 0)
{
    <div class="alert alert-info">No holidays found.</div>
}
else
{
    <SfGrid DataSource="@holidays"
            AllowFiltering="true" AllowSorting="true" ShowColumnChooser="true"
            AllowPaging="true" AllowResizing="true" Width="100%"
            EnableAdaptiveUI="true" RowRenderingMode="RowDirection.Vertical"
            Toolbar="@(new List<string>() { "Search", "ColumnChooser" })" AllowTextWrap="true"
            class="table table-striped">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" />
        <GridTemplates>
            <DetailTemplate>
                @{
                    var holidayItem = context as SchoolCalendarEvent;
                }
                <div class="holiday-detail-container">
                    <div class="holiday-header">
                        <h4>@holidayItem.Title</h4>
                        <span class="badge" style="background-color: @(holidayItem.CategoryColor ?? "#e53935")">
                            Holiday
                        </span>
                    </div>
                    
                    <div class="holiday-timing">
                        <div><strong>When:</strong> @FormatHolidayDate(holidayItem)</div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(holidayItem.Description))
                    {
                        <div class="holiday-description">
                            <strong>Description:</strong>
                            <p>@holidayItem.Description</p>
                        </div>
                    }
                </div>
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn Field="Title" HeaderText="Holiday" Width="200px" />
            <GridColumn HeaderText="Date" Width="180px">
                <Template>
                    @{
                        var holidayItem = (context as SchoolCalendarEvent);
                        @FormatHolidayDate(holidayItem)
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="EventType" HeaderText="Type" Width="120px">
                <Template>
                    @{
                        var holidayItem = (context as SchoolCalendarEvent);
                        <span class="badge" style="background-color: @(holidayItem.CategoryColor ?? "#e53935")">
                            @holidayItem.EventType
                        </span>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Description" HeaderText="Description" Width="250px" />
        </GridColumns>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field="Title" Type="AggregateType.Count">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total Holidays: @(data?.Count ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>
    </SfGrid>
}

<style>
    .holiday-detail-container {
        padding: 15px;
        background-color: #fff8f8;
        border-radius: 6px;
    }
    
    .holiday-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .holiday-header h4 {
        margin: 0;
    }
    
    .holiday-timing {
        margin-bottom: 10px;
    }
    
    .holiday-description {
        margin-top: 10px;
    }
    
    .badge {
        padding: 5px 10px;
        color: white;
        border-radius: 4px;
    }
</style>

@code {
    private List<SchoolCalendarEvent>? holidays;
    private int schoolId;

    protected override async Task OnInitializedAsync()
    {
        schoolId = UserState.SchoolId ?? 0;
        if (schoolId > 0)
        {
            await LoadHolidays();
        }
    }

    private async Task LoadHolidays()
    {
        holidays = await SchoolCalendarEventService.GetSchoolHolidaysAsync(schoolId);
    }

    private string FormatHolidayDate(SchoolCalendarEvent holiday)
    {
        if (holiday.StartTime.Date == holiday.EndTime.Date)
        {
            return holiday.StartTime.ToString("MMMM dd, yyyy");
        }
        else
        {
            return $"{holiday.StartTime.ToString("MMM dd")} - {holiday.EndTime.ToString("MMM dd, yyyy")}";
        }
    }
}