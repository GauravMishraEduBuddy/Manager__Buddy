@using EduBuddyApp.Models
@using EduBuddyApp.Services
@inject ISectionService SectionService
@inject UserState UserState

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfGrid DataSource="@students" TValue="StudentViewShortModel"
            AllowFiltering="true" AllowSorting="true" ShowColumnChooser="true"
            AllowPaging="true" AllowResizing="true" Width="100%"
            EnableAdaptiveUI="true" RowRenderingMode="RowDirection.Vertical"
            Toolbar="@toolbarItems" AllowTextWrap="true" class="table table-striped">
        <GridFilterSettings Type="FilterType.Excel" />
        <GridColumns>
            <GridColumn HeaderText="Photo" Width="80" AllowFiltering="false" AllowSorting="false">
                <Template>
                    @{
                        var student = context as StudentViewShortModel;
                    }
                    <!--  -->
                    <RadzenImage Path="@GetStuPhotoUrl(student!.StudentID)"
                                 Style="width: 50px; height: 50px; object-fit: cover; border-radius: 50%;"
                                 Attributes="@(new Dictionary<string, object>
                                 {
                                     { "onerror", $"this.onerror=null; this.src='{FallbackIcon}';" }
                                 })" />
                            
                </Template>
            </GridColumn>
            <GridColumn Field="StudentID" HeaderText="ID" Width="80px" />
            <GridColumn Field="StudentName" HeaderText="Student Name" Width="220px" />
            <GridColumn Field="FatherName" HeaderText="Father" Width="150px" />
            <GridColumn Field="ExternalStudentID" HeaderText="Scholar No." Width="120px" />
        <!--  -->
            <GridColumn Field="IsNewAdmission" HeaderText="Is New" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="90px">
                <Template>
                    @{
                        var stu = context as StudentViewShortModel;
                    }
                    @if (stu?.IsNewAdmission == true)
                    {
                        <RadzenBadge Text="New" Style="background-color:#4caf50;color:white" />
                    }
                </Template>
            </GridColumn>

            <GridColumn Field="Gender" HeaderText="Gender" Width="100px" />
            <GridColumn Field="Address" HeaderText="Address" Visible="false" Width="200px" />
            <GridColumn Field="StudentMobileNo" HeaderText="Student Mobile" Visible="false" Width="150px" />
            <GridColumn Field="FatherMobileNo" HeaderText="Father Mobile" Visible="false" Width="150px" />
            <GridColumn Field="MotherName" HeaderText="Mother" Visible="false" Width="150px" />
            <GridColumn Field="MotherMobileNo" HeaderText="Mother Mobile" Visible="false" Width="150px" />
            <GridColumn Field="IsRTEAdmission" HeaderText="Is RTE" Visible="false" Width="100px" />
            @if (UserState.IsCollege)
            {
                <GridColumn Field="BachName" HeaderText="Batch" Visible="false" Width="150px" />
                <GridColumn Field="Branch" HeaderText="Branch" Visible="false" Width="150px" />
                <GridColumn Field="StuStatus" HeaderText="Status" Visible="false" Width="150px" />
            }
           
        </GridColumns>
        <!-- 
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field="StudentName" Type="AggregateType.Count">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total Students: @(data?.Count ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field="IsNewAdmission" Type="AggregateType.Custom" CustomAggregate="@CountNewAdmissions">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            New Admissions: @(data?.Custom ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>
        -->
    </SfGrid>
}

@code {
    

    private List<StudentViewShortModel>? students;
    private readonly List<string> toolbarItems = new() { "Search", "ColumnChooser" };
    private const string FallbackIcon = "/images/default-user.png";

    protected override async Task OnParametersSetAsync()
    {
        int sectionId = UserState.EmployeeDetails?.ClassTeacherSchoolClassId ?? 0;
        students = await SectionService.GetStudentsInSectionAsync(sectionId);
    }

    private string GetStuPhotoUrl(int studentId)
    {
        int userSchoolId = UserState.SchoolId ?? 0;
        string schoolContainerName = userSchoolId == 1 ? "data" : $"school-{userSchoolId}";
        return BlobStorageService.GetStuPhotoUrl(studentId, schoolContainerName);
    }

    private object CountNewAdmissions(IEnumerable<object> data)
    {
        return data.Cast<StudentViewShortModel>().Count(s => s.IsNewAdmission == true);
    }
}
