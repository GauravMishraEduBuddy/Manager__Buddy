@using EduBuddyApp.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject UserState UserState
@inject DialogService DialogService
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@inject ISchoolService SchoolService
@inject IFacilityService FacilityService

<div class="login-form">
    <EditForm Model="credentials" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label" for="schoolId">School ID</label>
            <InputNumber id="schoolId"
                        class="form-control"
                        @bind-Value="credentials.SchoolId" />
        </div>

        <div class="mb-3">
            <label class="form-label" for="username">Username</label>
            <InputText id="username"
                      class="form-control"
                      @bind-Value="credentials.UserName" />
        </div>

        <div class="mb-3">
            <label class="form-label" for="password">Password</label>
            <InputText id="password"
                      class="form-control"
                      type="password"
                      @bind-Value="credentials.Password" />
        </div>

        <div class="mb-3 d-grid">
            <button type="submit" class="btn btn-primary">Log in</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(error))
    {
        <p class="text-danger">@error</p>
    }
    else if (loginResult.IsSuccess)
    {
        <p class="text-success">
            Logged in successfully!
        </p>
    }
</div>

@code {
    private Credentials credentials = new();
    private LoginResult loginResult = new(false, 0, null, null);
    private string? error;

    [Parameter]
    public EventCallback<bool> OnLoginComplete { get; set; }

    public class Credentials
    {
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "School ID is required")]
        public int SchoolId { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        // clear prior state
        error = null;
        loginResult = new(false, 0, null, null);

        // modify username to include school id
        var userWithSchool = credentials.UserName;
        var atIndex = userWithSchool.IndexOf('@');
        if (atIndex > -1)
        {
            userWithSchool = userWithSchool.Insert(atIndex, $"+{credentials.SchoolId}");
        }

        try
        {
            // call the API
            loginResult = await AuthService.LoginAsync(
                userWithSchool,
                credentials.Password);

            if (!loginResult.IsSuccess)
            {
                error = "Invalid credentials";
                await OnLoginComplete.InvokeAsync(false);
            }
            else
            {
                // Set user state
                UserState.EmployeeId = loginResult.Id;
                UserState.SchoolId = loginResult.SchoolId;
                UserState.Jwt = loginResult.Token;

                if (UserState.EmployeeId is not null)
                {
                    try
                    {
                        UserState.EmployeeDetails = await EmployeeService.GetEmployeeBasicAsync(UserState.EmployeeId.Value);
                    }
                    catch (Exception ex)
                    {
                        error = $"Failed to load employee details: {ex.Message}";
                        await OnLoginComplete.InvokeAsync(false);
                        return;
                    }
                }
                
                // Update IsCollege using SchoolService
                if (UserState.SchoolId is not null)
                {
                    var schoolBasic = await SchoolService.GetBasicSchoolAsync(UserState.SchoolId.Value);
                    UserState.IsCollege = schoolBasic?.IsCollege ?? false;
                    
                    // Fetch facility statuses
                    try
                    {
                        UserState.FacilityStatuses = await FacilityService.GetFacilitiesStatusAsync(UserState.SchoolId.Value);
                    }
                    catch (Exception ex)
                    {
                        // Log the error but continue - non-critical failure
                        Console.WriteLine($"Failed to load facility statuses: {ex.Message}");
                    }

                    // Check ManagerBuddy status
                    var managerBuddyEnabled = UserState.FacilityStatuses
                        .FirstOrDefault(f => f.FacilityName == "ManagerBuddy")?.IsEnabled ?? false;

                    if (!managerBuddyEnabled)
                    {
                        // Navigate to no-access page instead of logging out
                        await OnLoginComplete.InvokeAsync(false);
                        DialogService.Close();
                        NavigationManager.NavigateTo("/no-access");
                        return;
                    }
                }

                // Notify parent component and close dialog
                await OnLoginComplete.InvokeAsync(true);
                DialogService.Close();
            }
        }
        catch (Exception ex)
        {
            error = $"Error during login: {ex.Message}";
            await OnLoginComplete.InvokeAsync(false);
        }
    }
}

<style>
    .login-form {
        padding: 1rem;
        max-width: 400px;
        margin: 0 auto;
    }
</style>