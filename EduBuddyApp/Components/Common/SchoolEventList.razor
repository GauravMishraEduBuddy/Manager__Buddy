
@using EduBuddyApp.Services
@using Syncfusion.Blazor.Grids
@inject ISchoolCalendarEventService SchoolCalendarEventService
@inject UserState UserState
@using EduBuddyApp.Models

@if (calendarEvents == null)
{
    <p><em>Loading...</em></p>
}
else if (calendarEvents.Count == 0)
{
    <div class="alert alert-info">No events found.</div>
}
else
{
    <SfGrid DataSource="@calendarEvents"
            AllowFiltering="true" AllowSorting="true" ShowColumnChooser="true"
            AllowPaging="true" AllowResizing="true" Width="100%"
            EnableAdaptiveUI="true" RowRenderingMode="RowDirection.Vertical"
            Toolbar="@(new List<string>() { "Search", "ColumnChooser" })" AllowTextWrap="true"
            class="table table-striped">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" />
        <GridTemplates>
            <DetailTemplate>
                @{
                    var eventItem = context as SchoolCalendarEvent;
                }
                <RadzenCard class="event-detail-card">
                    <div class="event-header">
                        <RadzenIcon Icon="event" Style="font-size:32px; color:#ffe082; margin-right:12px;" />
                        <h4 class="event-title">@eventItem.Title</h4>
                        <span class="badge" style="background-color: @(eventItem.CategoryColor ?? "#1976d2"); color: #fffde7; margin-left:auto;">
                            @eventItem.EventType
                        </span>
                    </div>
                    <div class="event-timing">
                        <RadzenIcon Icon="schedule" Style="font-size:20px; color:#ffe082; margin-right:8px;" />
                        <span><strong>When:</strong> <span class="meta-text">@FormatEventDate(eventItem)</span></span>
                        @if (!string.IsNullOrEmpty(eventItem.Location))
                        {
                            <RadzenIcon Icon="location_on" Style="font-size:20px; color:#ffe082; margin-left:16px; margin-right:8px;" />
                            <span><strong>Where:</strong> <span class="meta-text">@eventItem.Location</span></span>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(eventItem.Description))
                    {
                        <div class="event-description">
                            <RadzenIcon Icon="description" Style="font-size:20px; color:#ffe082; margin-right:8px;" />
                            <strong>Description:</strong>
                            <span class="meta-text">@eventItem.Description</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(eventItem.RecurrenceRule))
                    {
                        <div class="event-recurrence">
                            <RadzenIcon Icon="repeat" Style="font-size:20px; color:#ffe082; margin-right:8px;" />
                            <strong>Recurrence:</strong>
                            <span class="meta-text">@eventItem.RecurrenceRule</span>
                        </div>
                    }
                    <div class="event-meta">
                        <div>
                            <RadzenIcon Icon="group" Style="font-size:18px; color:#ffe082; margin-right:6px;" />
                            <span><strong>Audience:</strong> <span class="meta-text">@eventItem.Audience.ToString()</span></span>
                        </div>
                        <div>
                            <RadzenIcon Icon="event_busy" Style="font-size:18px; color:#ffe082; margin-right:6px;" />
                            <span><strong>School Closed:</strong> <span class="meta-text">@((eventItem.IsSchoolClosed) ? "Yes" : "No")</span></span>
                        </div>
                    </div>
                </RadzenCard>
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn Field="Title" HeaderText="Event Title" Width="200px" />
            <GridColumn Field="EventType" HeaderText="Type" Width="100px">
                <Template>
                    @{
                        var eventItem = (context as SchoolCalendarEvent);
                        <span class="badge" style="background-color: @(eventItem.CategoryColor ?? GetEventTypeColor(eventItem.EventType))">
                            @eventItem.EventType
                        </span>
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="Date/Time" Width="180px">
                <Template>
                    @{
                        var eventItem = (context as SchoolCalendarEvent);
                        @FormatEventDate(eventItem)
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Location" HeaderText="Location" Width="150px" />
            <GridColumn Field="IsSchoolClosed" HeaderText="School Closed" Width="120px">
                <Template>
                    @{
                        var eventItem = (context as SchoolCalendarEvent);
                        if (eventItem.IsSchoolClosed)
                        {
                            <span class="badge bg-danger">Yes</span>
                        }
                        else
                        {
                            <span>No</span>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Audience" HeaderText="Audience" Width="120px" />
        </GridColumns>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field="Title" Type="AggregateType.Count">
                        <FooterTemplate>
                            @{ var data = context as AggregateTemplateContext; }
                            Total Events: @(data?.Count ?? "0")
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>
    </SfGrid>
}

<style>
    .event-detail-container {
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 6px;
    }
    
    .event-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .event-header h4 {
        margin: 0;
    }
    
    .event-timing {
        margin-bottom: 10px;
    }
    
    .event-description {
        margin-top: 10px;
    }
    
    .event-recurrence {
        margin-top: 10px;
        font-style: italic;
    }
    
    .badge {
        padding: 5px 10px;
        color: white;
        border-radius: 4px;
    }
</style>

@code {
    private List<SchoolCalendarEvent>? calendarEvents;
    private int schoolId;

    protected override async Task OnInitializedAsync()
    {
        schoolId = UserState.SchoolId ?? 0;
        if (schoolId > 0)
        {
            await LoadEvents();
        }
    }

    private async Task LoadEvents()
    {
        calendarEvents = await SchoolCalendarEventService.GetSchoolCalendarEventsAsync(schoolId);
    }

    private string FormatEventDate(SchoolCalendarEvent evt)
    {
        if (evt.IsAllDay)
        {
            if (evt.StartTime.Date == evt.EndTime.Date)
            {
                return evt.StartTime.ToString("MMM dd, yyyy") + " (All day)";
            }
            else
            {
                return $"{evt.StartTime.ToString("MMM dd")} - {evt.EndTime.ToString("MMM dd, yyyy")} (All day)";
            }
        }
        else
        {
            if (evt.StartTime.Date == evt.EndTime.Date)
            {
                return $"{evt.StartTime.ToString("MMM dd, yyyy, h:mm tt")} - {evt.EndTime.ToString("h:mm tt")}";
            }
            else
            {
                return $"{evt.StartTime.ToString("MMM dd, h:mm tt")} - {evt.EndTime.ToString("MMM dd, yyyy, h:mm tt")}";
            }
        }
    }

    private string GetEventTypeColor(CalendarEventType eventType)
    {
        return eventType switch
        {
            CalendarEventType.Event => "#1976d2",      // Blue
            CalendarEventType.Holiday => "#e53935",    // Red
            CalendarEventType.ExamBreak => "#ff9800",  // Orange
            CalendarEventType.Other => "#9c27b0",      // Purple
            _ => "#757575"                             // Gray
        };
    }
}
<style>
    .event-detail-card {
        background: #004d40 !important;
        color: #fffde7 !important;
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.18);
        padding: 24px;
        margin: 8px 0;
    }

    .event-header {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
    }

    .event-title {
        color: #fffde7;
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .event-timing {
        display: flex;
        align-items: center;
        margin-bottom: 14px;
        color: #fffde7;
        font-size: 1.1rem;
    }

    .event-description, .event-recurrence {
        display: flex;
        align-items: center;
        margin-bottom: 14px;
        color: #ffe082;
        font-size: 1rem;
    }

    .event-meta {
        margin-top: 18px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .meta-text {
        color: #ffe082;
        font-weight: 500;
        margin-left: 4px;
    }

    .badge {
        padding: 5px 10px;
        color: #fffde7;
        border-radius: 4px;
        font-weight: 600;
    }
</style>